{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Silas\\\\Downloads\\\\AEO-FrontEnd\\\\frontend\\\\src\\\\components\\\\ui\\\\EntityForm.js\";\nimport React from 'react';\n\n// Este é nosso componente de formulário genérico\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EntityForm({\n  entity,\n  // O objeto que está sendo editado (ex: { name: 'Eletrônicos' }) ou null se for criação\n  setEntity,\n  // A função para atualizar o estado da entidade (ex: setName)\n  fields,\n  // Um array de objetos descrevendo cada campo do formulário\n  onSubmit,\n  // A função a ser chamada quando o formulário for submetido\n  isEditing,\n  // Um booleano que nos diz se estamos editando ou criando\n  onCancelEdit,\n  // A função para cancelar a edição\n  submitButtonText // O texto para o botão de submit (ex: 'Criar Categoria')\n}) {\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    // Atualiza o estado da entidade com o novo valor do campo\n    setEntity(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: onSubmit,\n    className: \"entity-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isEditing ? `Editar ${fields[0].label}` : `Criar Nova ${fields[0].label}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), fields.map(field => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: field.name,\n        children: field.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: field.type,\n        id: field.name,\n        name: field.name,\n        value: (entity === null || entity === void 0 ? void 0 : entity[field.name]) || '',\n        onChange: handleInputChange,\n        placeholder: `Digite o ${field.label.toLowerCase()}...`,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }, this)]\n    }, field.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: submitButtonText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: onCancelEdit,\n        className: \"cancel-button\",\n        children: \"Cancelar Edi\\xE7\\xE3o\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\n_c = EntityForm;\nexport default EntityForm;\nvar _c;\n$RefreshReg$(_c, \"EntityForm\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","EntityForm","entity","setEntity","fields","onSubmit","isEditing","onCancelEdit","submitButtonText","handleInputChange","e","name","value","target","prevState","className","children","label","fileName","_jsxFileName","lineNumber","columnNumber","map","field","htmlFor","type","id","onChange","placeholder","toLowerCase","required","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Silas/Downloads/AEO-FrontEnd/frontend/src/components/ui/EntityForm.js"],"sourcesContent":["import React from 'react';\r\n\r\n// Este é nosso componente de formulário genérico\r\nfunction EntityForm({\r\n    entity,          // O objeto que está sendo editado (ex: { name: 'Eletrônicos' }) ou null se for criação\r\n    setEntity,       // A função para atualizar o estado da entidade (ex: setName)\r\n    fields,          // Um array de objetos descrevendo cada campo do formulário\r\n    onSubmit,        // A função a ser chamada quando o formulário for submetido\r\n    isEditing,       // Um booleano que nos diz se estamos editando ou criando\r\n    onCancelEdit,    // A função para cancelar a edição\r\n    submitButtonText // O texto para o botão de submit (ex: 'Criar Categoria')\r\n}) {\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        // Atualiza o estado da entidade com o novo valor do campo\r\n        setEntity(prevState => ({ ...prevState, [name]: value }));\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={onSubmit} className=\"entity-form\">\r\n            <h2>{isEditing ? `Editar ${fields[0].label}` : `Criar Nova ${fields[0].label}`}</h2>\r\n            \r\n            {fields.map(field => (\r\n                <div key={field.name} className=\"form-group\">\r\n                    <label htmlFor={field.name}>{field.label}</label>\r\n                    <input\r\n                        type={field.type}\r\n                        id={field.name}\r\n                        name={field.name}\r\n                        value={entity?.[field.name] || ''}\r\n                        onChange={handleInputChange}\r\n                        placeholder={`Digite o ${field.label.toLowerCase()}...`}\r\n                        required\r\n                    />\r\n                </div>\r\n            ))}\r\n            \r\n            <div className=\"form-actions\">\r\n                <button type=\"submit\">{submitButtonText}</button>\r\n                {isEditing && (\r\n                    <button type=\"button\" onClick={onCancelEdit} className=\"cancel-button\">\r\n                        Cancelar Edição\r\n                    </button>\r\n                )}\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default EntityForm;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,UAAUA,CAAC;EAChBC,MAAM;EAAW;EACjBC,SAAS;EAAQ;EACjBC,MAAM;EAAW;EACjBC,QAAQ;EAAS;EACjBC,SAAS;EAAQ;EACjBC,YAAY;EAAK;EACjBC,gBAAgB,CAAC;AACrB,CAAC,EAAE;EACC,MAAMC,iBAAiB,GAAIC,CAAC,IAAK;IAC7B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChC;IACAV,SAAS,CAACW,SAAS,KAAK;MAAE,GAAGA,SAAS;MAAE,CAACH,IAAI,GAAGC;IAAM,CAAC,CAAC,CAAC;EAC7D,CAAC;EAED,oBACIZ,OAAA;IAAMK,QAAQ,EAAEA,QAAS;IAACU,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC7ChB,OAAA;MAAAgB,QAAA,EAAKV,SAAS,GAAG,UAAUF,MAAM,CAAC,CAAC,CAAC,CAACa,KAAK,EAAE,GAAG,cAAcb,MAAM,CAAC,CAAC,CAAC,CAACa,KAAK;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAEnFjB,MAAM,CAACkB,GAAG,CAACC,KAAK,iBACbvB,OAAA;MAAsBe,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACxChB,OAAA;QAAOwB,OAAO,EAAED,KAAK,CAACZ,IAAK;QAAAK,QAAA,EAAEO,KAAK,CAACN;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACjDrB,OAAA;QACIyB,IAAI,EAAEF,KAAK,CAACE,IAAK;QACjBC,EAAE,EAAEH,KAAK,CAACZ,IAAK;QACfA,IAAI,EAAEY,KAAK,CAACZ,IAAK;QACjBC,KAAK,EAAE,CAAAV,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAGqB,KAAK,CAACZ,IAAI,CAAC,KAAI,EAAG;QAClCgB,QAAQ,EAAElB,iBAAkB;QAC5BmB,WAAW,EAAE,YAAYL,KAAK,CAACN,KAAK,CAACY,WAAW,CAAC,CAAC,KAAM;QACxDC,QAAQ;MAAA;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX,CAAC;IAAA,GAVIE,KAAK,CAACZ,IAAI;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAWf,CACR,CAAC,eAEFrB,OAAA;MAAKe,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACzBhB,OAAA;QAAQyB,IAAI,EAAC,QAAQ;QAAAT,QAAA,EAAER;MAAgB;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC,EAChDf,SAAS,iBACNN,OAAA;QAAQyB,IAAI,EAAC,QAAQ;QAACM,OAAO,EAAExB,YAAa;QAACQ,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAEvE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACX;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEf;AAACW,EAAA,GA5CQ/B,UAAU;AA8CnB,eAAeA,UAAU;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}