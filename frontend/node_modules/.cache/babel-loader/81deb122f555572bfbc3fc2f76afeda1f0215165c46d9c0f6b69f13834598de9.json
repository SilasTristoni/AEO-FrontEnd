{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\silas.tristoni\\\\Downloads\\\\AEO-FrontEnd\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [auth, setAuth] = useState({\n    token: null,\n    user: null\n  });\n  // Adicionamos um estado para controlar o carregamento inicial da autenticação\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    try {\n      const token = localStorage.getItem('token');\n      if (token) {\n        const decoded = jwtDecode(token);\n        // Verifica se o token não expirou (opcional, mas recomendado)\n        if (decoded.exp * 1000 > Date.now()) {\n          setAuth({\n            token,\n            user: {\n              id: decoded.id,\n              name: decoded.name\n            }\n          });\n        } else {\n          // Token expirado\n          localStorage.removeItem('token');\n        }\n      }\n    } catch (error) {\n      console.error(\"Token inválido no localStorage:\", error);\n      localStorage.removeItem('token');\n    } finally {\n      // Independente do resultado, o carregamento inicial terminou\n      setLoading(false);\n    }\n  }, []);\n  const login = token => {\n    localStorage.setItem('token', token);\n    const decoded = jwtDecode(token);\n    setAuth({\n      token,\n      user: {\n        id: decoded.id,\n        name: decoded.name\n      }\n    });\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setAuth({\n      token: null,\n      user: null\n    });\n  };\n\n  // Agora o Provider também informa se a verificação inicial ainda está acontecendo\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      auth,\n      login,\n      logout,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"LXm6bSJmzEnMueK0O3uam62Ysro=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jwtDecode","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","auth","setAuth","token","user","loading","setLoading","localStorage","getItem","decoded","exp","Date","now","id","name","removeItem","error","console","login","setItem","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/silas.tristoni/Downloads/AEO-FrontEnd/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nexport const AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [auth, setAuth] = useState({ token: null, user: null });\r\n  // Adicionamos um estado para controlar o carregamento inicial da autenticação\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        const decoded = jwtDecode(token);\r\n        // Verifica se o token não expirou (opcional, mas recomendado)\r\n        if (decoded.exp * 1000 > Date.now()) {\r\n          setAuth({ token, user: { id: decoded.id, name: decoded.name } });\r\n        } else {\r\n          // Token expirado\r\n          localStorage.removeItem('token');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Token inválido no localStorage:\", error);\r\n      localStorage.removeItem('token');\r\n    } finally {\r\n      // Independente do resultado, o carregamento inicial terminou\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const login = (token) => {\r\n    localStorage.setItem('token', token);\r\n    const decoded = jwtDecode(token);\r\n    setAuth({ token, user: { id: decoded.id, name: decoded.name } });\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setAuth({ token: null, user: null });\r\n  };\r\n\r\n  // Agora o Provider também informa se a verificação inicial ainda está acontecendo\r\n  return (\r\n    <AuthContext.Provider value={{ auth, login, logout, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,SAASC,SAAS,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,IAAI,CAAC;AAE9C,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC;IAAEW,KAAK,EAAE,IAAI;IAAEC,IAAI,EAAE;EAAK,CAAC,CAAC;EAC7D;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,IAAI;MACF,MAAMU,KAAK,GAAGI,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIL,KAAK,EAAE;QACT,MAAMM,OAAO,GAAGf,SAAS,CAACS,KAAK,CAAC;QAChC;QACA,IAAIM,OAAO,CAACC,GAAG,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;UACnCV,OAAO,CAAC;YAAEC,KAAK;YAAEC,IAAI,EAAE;cAAES,EAAE,EAAEJ,OAAO,CAACI,EAAE;cAAEC,IAAI,EAAEL,OAAO,CAACK;YAAK;UAAE,CAAC,CAAC;QAClE,CAAC,MAAM;UACL;UACAP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;QAClC;MACF;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvDT,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAClC,CAAC,SAAS;MACR;MACAT,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,KAAK,GAAIf,KAAK,IAAK;IACvBI,YAAY,CAACY,OAAO,CAAC,OAAO,EAAEhB,KAAK,CAAC;IACpC,MAAMM,OAAO,GAAGf,SAAS,CAACS,KAAK,CAAC;IAChCD,OAAO,CAAC;MAAEC,KAAK;MAAEC,IAAI,EAAE;QAAES,EAAE,EAAEJ,OAAO,CAACI,EAAE;QAAEC,IAAI,EAAEL,OAAO,CAACK;MAAK;IAAE,CAAC,CAAC;EAClE,CAAC;EAED,MAAMM,MAAM,GAAGA,CAAA,KAAM;IACnBb,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCb,OAAO,CAAC;MAAEC,KAAK,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAK,CAAC,CAAC;EACtC,CAAC;;EAED;EACA,oBACER,OAAA,CAACC,WAAW,CAACwB,QAAQ;IAACC,KAAK,EAAE;MAAErB,IAAI;MAAEiB,KAAK;MAAEE,MAAM;MAAEf;IAAQ,CAAE;IAAAN,QAAA,EAC3DA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC1B,EAAA,CA5CWF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}