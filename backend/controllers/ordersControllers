const Orders = require('../models/orders');
const Products = require('../models/products');
const OrderProduct = require('../models/orderProduct');

class OrdersControllers {
    static async findAllOrders(req, res) {
        try {
            const orders = await Orders.findAll({
                 include: [{ model: Products, as: 'products', through: { attributes: [] }}]
            });
            return res.status(200).json(orders);
        } catch (err) {
            return res.status(500).json({ message: 'Erro ao buscar os pedidos', error: err.message });
        }
    }

    static async findOrderById(req, res) {
        try {
            const { id } = req.params;
            const order = await Orders.findByPk(id, {
                include: [{ model: Products, as: 'products', through: { attributes: ['quantity'] }}]
            });
            if (!order) {
                return res.status(404).json({ message: 'Id não encontrado' });
            }
            return res.status(200).json(order);
        } catch (err) {
            return res.status(500).json({ message: 'Erro ao buscar o pedido', error: err.message });
        }
    }

    static async createOrder(req, res) {
        try {
            // products deve ser um array de objetos: [{productId: 1, quantity: 2}, {productId: 3, quantity: 1}]
            const { userId, products } = req.body;
            if(!userId || !products || !Array.isArray(products) || products.length === 0){
                 return res.status(400).json({ message: 'userId e uma lista de produtos são obrigatórios.' });
            }

            const newOrder = await Orders.create({ userId });

            for (const product of products) {
                await newOrder.addProduct(product.productId, { through: { quantity: product.quantity } });
            }

            const result = await Orders.findByPk(newOrder.id, {
                include: [{ model: Products, as: 'products', through: { attributes: ['quantity'] }}]
            });

            return res.status(201).json(result);
        } catch (err) {
            return res.status(500).json({ message: 'Erro ao criar o pedido', error: err.message });
        }
    }

    static async updateOrder(req, res) {
        // Esta função pode ser complexa. Uma abordagem simples seria deletar e recriar as associações.
        try {
            const { id } = req.params;
            const { userId, products } = req.body; // products: [{productId: 1, quantity: 2}]
            
            const order = await Orders.findByPk(id);
            if (!order) {
                return res.status(404).json({ message: 'Pedido não encontrado' });
            }

            if (userId) order.userId = userId;

            if(products && Array.isArray(products)) {
                await OrderProduct.destroy({ where: { orderId: id }}); // Remove associações antigas
                for (const product of products) {
                    await order.addProduct(product.productId, { through: { quantity: product.quantity } });
                }
            }
            
            await order.save();
            
             const result = await Orders.findByPk(id, {
                include: [{ model: Products, as: 'products', through: { attributes: ['quantity'] }}]
            });
            
            return res.status(200).json(result);
        } catch (err) {
            return res.status(500).json({ message: 'Erro ao atualizar o pedido', error: err.message });
        }
    }

    static async deleteOrder(req, res) {
        try {
            const { id } = req.params;
            const order = await Orders.findByPk(id);
            if (!order) {
                return res.status(404).json({ message: 'Pedido não encontrado' });
            }
            await order.destroy();
            return res.status(204).send();
        } catch (err) {
            return res.status(500).json({ message: 'Erro ao deletar o pedido', error: err.message });
        }
    }
    
    static async findOrdersByUserId(req, res) {
        try {
            const { id } = req.params; // id do usuário
            const orders = await Orders.findAll({
                where: { userId: id },
                include: [{ model: Products, as: 'products', through: { attributes: ['quantity'] }}]
            });
            if (orders.length === 0) {
                return res.status(404).json({ message: 'Nenhum pedido encontrado para este usuário' });
            }
            return res.status(200).json(orders);
        } catch (err) {
            return res.status(500).json({ message: 'Erro ao buscar os pedidos', error: err.message });
        }
    }
}
module.exports = OrdersControllers;